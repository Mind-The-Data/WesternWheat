#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Apr  2 13:34:46 2018

@author: brian

CONCATENATING DATAFRAMES
"""
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import glob
import statsmodels.formula.api as sm

data_path = '../rawData/AgMet/'

df23ndvi = pd.DataFrame()
for f in sorted(glob.glob(data_path + 'monthlyLSclass23*')):
    df23ndvi = pd.concat((df23ndvi, pd.read_csv(f)))


df23ndvi.index = df23ndvi['system:indexviejuno']
#df23ndvi= df23ndvi[df23ndvi.index ==47883.0]   #selecting single pixel 47883

datapathMet = '..'
dfMet23 = pd.read_csv(datapathMet + '/rawData/AgMet/monthlymeteo23.csv')

dfMet23.index = dfMet23['system:indexviejuno']
#dfMet23 = dfMet23[dfMet23.index == 47883.0] #selecting single pixel 47883

frames = [df23ndvi, dfMet23]
df23master = pd.concat(frames)





###########
#renaming columns
##########
df23master = df23master.rename(columns={'vpd':'VPD'})
df23master = df23master.rename(columns={'pr':'P'})

#######################
#adding a new column: 'month'
#######################
df23master['month'] = ((df23master['fractionofyear'] - df23master['fractionofyear'].astype(int))*12).round().astype(int)

#Calculating arrays? of means and stds
meanVPD = df23master.groupby(['system:indexviejuno', 'month'])['VPD'].mean()
stdVPD = df23master.groupby(['system:indexviejuno', 'month'])['VPD'].std()
meanP = df23master.groupby(['system:indexviejuno', 'month'])['P'].mean()
stdP = df23master.groupby(['system:indexviejuno', 'month'])['P'].std() 


###########################################################################
#Vapor Pressure Deficit to dataframe, no need for a negative version dummy
###########################################################################
df23master = df23master.join(meanVPD, on=['system:indexviejuno', 'month'], rsuffix='mean')
df23master = df23master.join(stdVPD, on=['system:indexviejuno', 'month'], rsuffix='std')
df23master['VPDanomaly'] = (df23master['VPD'] - df23master['VPDmean'])/df23master['VPDstd'] 
#df23master['negVPDanomaly']=(df23master['VPDanomaly'])*(-1)
meananomalyVPD = df23master.groupby(['system:indexviejuno', 'fractionofyear'])['VPDanomaly'].mean()
df23master = df23master.join(meananomalyVPD, on=['system:indexviejuno', 'fractionofyear'], rsuffix='Mean')
#negative_meananomalyVPD = df23master.groupby(['system:indexviejuno', 'fractionofyear'])['negVPDanomaly'].mean()
#df23master = df23master.join(negative_meananomalyVPD, on=['system:indexviejuno', 'fractionofyear'], rsuffix='Mean')

##calculating anomaly with vpd instaneous - monthlymean is not quite what I want.What do i want? vpd monthly average- vpd yearly average bined by month

############################
#Precipitation anomalies
###########################3
df23master = df23master.join(meanP, on=['system:indexviejuno', 'month'], rsuffix='mean')
df23master = df23master.join(stdP, on=['system:indexviejuno', 'month'], rsuffix='std')
df23master['Panomaly'] = (df23master['P'] - df23master['Pmean'])/df23master['Pstd']
#average of the daily anomalies (take the (VPD-yearlymean_binned_month/std) and average over all VPD's in given fractionofyear
meananomalyP = df23master.groupby(['system:indexviejuno', 'fractionofyear'])['Panomaly'].mean()
df23master = df23master.join(meananomalyP, on=['system:indexviejuno', 'fractionofyear'], rsuffix='Mean')

#############################
#NDVI
##############################
df23master['NDVI'] = (df23master['B4'] - df23master['B3'])/(df23master['B4'] + df23master['B3'])
df23master['month'] = ((df23master['fractionofyear'] - df23master['fractionofyear'].astype(int))*12).round().astype(int)
meanNDVI = df23master.groupby(['system:indexviejuno', 'month'])['NDVI'].mean()
stdNDVI = df23master.groupby(['system:indexviejuno', 'month'])['NDVI'].std()
df23master = df23master.join(meanNDVI, on=['system:indexviejuno', 'month'], rsuffix='mean')
df23master = df23master.join(stdNDVI, on=['system:indexviejuno', 'month'], rsuffix='std')
df23master['NDVIanomaly'] = (df23master['NDVI'] - df23master['NDVImean']) / df23master['NDVIstd']

# Monthly dfs
df23masterJuly = df23master[df23master['month']==7]
df23masterJune = df23master[df23master['month'] == 6]
df23masterMay = df23master[df23master['month'] == 5]

#summerframes would have to have renamed columns
#summerframes = [df23masterJuly, df23masterJune, df23masterMay]
#df23masterSummer = pd.concat(summerframes)

#TRYING TO ADD MAYPRECIP TO JUNE DF SO I CAN DO AN OLS WITH JUNE NDVI, VPD AND MAYP
## having trouble concatenating
## Code below works on server, produces a 50 GB file although, breaks local. 
#df23masterMay = df23masterMay.rename(columns={'PanomalyMean':'PanomalyMeanMay'})
#df23masterMayJustPanomalyMean = df23masterMay['PanomalyMeanMay']
#df23masterJunewithMayP= df23masterJune.join(df23masterMayJustPanomalyMean)

#Statistics
## correlation
df23masterJune['negVPDanomaly'].corr(df23masterJune['Panomaly'])
df23masterJune['negVPDanomalyMean'].corr(df23masterJune['PanomalyMean'])
## Ordinary Least Squares
linearbestfit = sm.ols(formula="NDVIanomaly ~ PanomalyMean + VPDanomalyMean", data = df23masterJune).fit()
print linearbestfit.params
print linearbestfit.summary()
 



# PLOTTING
## pixel indentification
id_pixel = pd.unique(df23master.index)
p = df23master[df23master.index==id_pixel[0]]
p500 = df23master[df23master.index==id_pixel[500]]
p1000 = df23master[df23master.index==id_pixel[1000]]
p1500 = df23master[df23master.index==id_pixel[1500]]
## plotting 
plt.figure(1, figsize=(20,10))
#plt.scatter(p['fractionofyear'], p['VPD'])
plt.plot(p['fractionofyear'], p['NDVIanomaly'], 'green')
plt.scatter(p['fractionofyear'],p['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p['fractionofyear'], p['PanomalyMean'], color='b')
#plt.plot(p['fractionofyear'], p['NDVImean'])
#plt.plot(p['fractionofyear'], p['NDVIstd'])

plt.figure(2, figsize=(20,10))
plt.plot(p500['fractionofyear'], p500['NDVIanomaly'], 'green')
plt.scatter(p500['fractionofyear'],p500['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p500['fractionofyear'], p500['PanomalyMean'], color='b')


plt.figure(3, figsize=(20,10))
plt.plot(p1000['fractionofyear'], p1000['NDVIanomaly'], 'green')
plt.scatter(p1000['fractionofyear'],p1000['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p1000['fractionofyear'], p1000['PanomalyMean'], color='b')

plt.figure(4, figsize=(20,10))
plt.scatter(p1500['fractionofyear'], p1500['NDVIanomaly'], marker='^', color='g')
plt.scatter(p1500['fractionofyear'],p1500['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p1500['fractionofyear'], p1500['PanomalyMean'], color='b')


#Just VPD and P
plt.figure(5, figsize=(20,10))
plt.scatter(p['fractionofyear'],p['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p['fractionofyear'], p['PanomalyMean'], color='b')
#############################################################
#############################################################
#Plotting single month: JUNE
#####################
####################
id_pixel = pd.unique(df23masterJune.index)
p = df23masterJune[df23masterJune.index==id_pixel[0]]
p500 = df23masterJune[df23masterJune.index==id_pixel[500]]
p1000 = df23masterJune[df23masterJune.index==id_pixel[1000]]
p1500 = df23masterJune[df23masterJune.index==id_pixel[1500]]

plt.figure(1, figsize=(10,5))
#plt.scatter(p['fractionofyear'], p['VPD'])
plt.scatter(p['fractionofyear'], p['NDVIanomaly'], marker='^', color='g')
plt.scatter(p['fractionofyear'],p['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p['fractionofyear'], p['PanomalyMean'], color='b')
#plt.plot(p['fractionofyear'], p['NDVImean'])
#plt.plot(p['fractionofyear'], p['NDVIstd'])

plt.figure(2, figsize=(10,5))
plt.scatter(p500['fractionofyear'], p500['NDVIanomaly'],  marker='^', color='g' )
plt.scatter(p500['fractionofyear'],p500['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p500['fractionofyear'], p500['PanomalyMean'], color='b')


plt.figure(3, figsize=(10,5))
plt.scatter(p1000['fractionofyear'], p1000['NDVIanomaly'], marker='^', color='g')
plt.scatter(p1000['fractionofyear'],p1000['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p1000['fractionofyear'], p1000['PanomalyMean'], color='b')

plt.figure(4, figsize=(10,5))
plt.scatter(p1500['fractionofyear'], p1500['NDVIanomaly'], marker='^', color='g')
plt.scatter(p1500['fractionofyear'],p1500['VPDanomalyMean']*-1, marker='x', color='r')
plt.scatter(p1500['fractionofyear'], p1500['PanomalyMean'], color='b')